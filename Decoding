from PIL import Image
from cryptography.fernet import Fernet
import numpy as np

# Convert binary data back to message
def binary_to_message(binary_string):
    byte_list = [binary_string[i:i+8] for i in range(0, len(binary_string), 8)]
    message_bytes = bytes(int(b, 2) for b in byte_list)
    return message_bytes

# Decrypt message
def decrypt_message(encrypted_message, key):
    cipher = Fernet(key)
    decrypted_message = cipher.decrypt(encrypted_message).decode()
    return decrypted_message

# Extract hidden message from an image
def extract_data(image_path, key):
    img = Image.open(image_path)
    img = img.convert('RGB')
    pixels = np.array(img)

    binary_message = ""
    for row in pixels:
        for pixel in row:
            for i in range(3):  # Extract from R, G, B values
                binary_message += str(pixel[i] & 1)

    extracted_bytes = binary_to_message(binary_message)
    extracted_message = extracted_bytes.split(b'####')[0]  # Remove delimiter

    decrypted_message = decrypt_message(extracted_message, key)
    print("Extracted Message:", decrypted_message)
    return decrypted_message

# Usage Example:
if __name__ == "__main__":
    secret_key = input("Enter the secret key for decryption: ").encode()  # Key must match encryption key
    extract_data("stego_image.png", secret_key)

